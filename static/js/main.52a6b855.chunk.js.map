{"version":3,"sources":["constants.js","dragging.js","Controls.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_TRANSLATE","x","y","DEFAULT_DIFF","dX","dY","mouseMove$","fromEvent","document","mouseDown$","mouseUp$","mouseDrag$","pipe","mergeMap","map","pick","pairwise","takeUntil","animationFrame$","interval","animationFrameScheduler","dragging$","prev","current","window","height","innerHeight","width","innerWidth","draggingWithDefaultOnMouseDown$","startWith","allPassMoveThreshold","compose","all","lt","mapR","Math","abs","values","inertia$","withLatestFrom","nth","filter","tap","value","console","log","scan","multiply","takeWhile","inertiaDragging$","merge","Controls","withInertia","toggleWithInertia","className","Tooltip","title","Switch","checked","onChange","color","addTranslate","App","useState","translate","setTransalte","setWithInertia","useEffect","subscription","subscribe","unsubscribe","transform","style","not","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4bAGaA,EAAoB,CAAEC,EAAG,EAAGC,EAAG,GAC/BC,EAAe,CAAEC,GAAI,EAAGC,GAAI,GCCnCC,EAAaC,YAAUC,SAAU,aACjCC,EAAaF,YAAUC,SAAU,aACjCE,EAAWH,YAAUC,SAAU,WAE/BG,EAAaF,EAAWG,KAC5BC,aAAS,kBAAMP,EAAWM,KACxBE,YAAIC,YAAK,CAAC,IAAK,OACfC,cACAC,YAAUP,QAIRQ,EAAkBC,YAAS,EAAGC,KAEvBC,EAAYV,EAAWC,KAClCE,aAAI,YAAsB,IAAD,mBAAnBQ,EAAmB,KAAbC,EAAa,OAC4BC,OAA9BC,EADE,EACfC,YAAiCC,EADlB,EACMC,WAK7B,MAAO,CAAExB,IAHGmB,EAAQtB,EAAIqB,EAAKrB,GAAK0B,EAGrBtB,IAFDkB,EAAQrB,EAAIoB,EAAKpB,GAAKuB,OAMhCI,EAAkCpB,EAAWG,KACjDC,aAAS,kBAAMQ,EAAUT,KAAKkB,YAAU3B,QAGpC4B,EAAuBC,YAAQC,YAAIC,YDjCX,OCiCgCC,YAAKC,KAAKC,KAAMC,KAExEC,EAAW7B,EAASE,KACxB4B,YAAeX,GACff,YAAI2B,YAAI,IACRC,YAAOX,GACPY,aAAI,SAACC,GAAD,OAAWC,QAAQC,IAAI,0BAA2BF,MACtD/B,aAAS,SAAC+B,GAAD,OAAW1B,EAAgBN,KAClCmC,YAAKZ,YAAKa,YD1Cc,MC0CWJ,GACnCK,YAAUlB,GACVd,YAAUR,QAIDyC,EAAmBC,YAC9B9B,EACAkB,G,kBC7Baa,EAjBE,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,kBAAhB,OACf,yBAAKC,UAAU,YACb,0BAAMA,UAAU,iBAAhB,2DAIA,kBAACC,EAAA,EAAD,CAASC,MAAM,kBACb,kBAACC,EAAA,EAAD,CACEC,QAASN,EACTO,SAAUN,EACVV,MAAM,cACNiB,MAAM,eCRRC,EAAe,SAAC,GAAD,IAAG1D,EAAH,EAAGA,GAAIC,EAAP,EAAOA,GAAP,OAAgB,gBAAGJ,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAN,MAAe,CAClDD,GAAIA,EAAIG,GHHsB,EGI9BF,GAAIA,EAAIG,GHJsB,KGoCjB0D,EA7BH,WAAO,IAAD,EACkBC,mBAAShE,GAD3B,mBACTiE,EADS,KACEC,EADF,OAEuBF,oBAAS,GAFhC,mBAETX,EAFS,KAEIc,EAFJ,KAIhBC,qBAAU,WACR,IACMC,GADUhB,EAAcH,EAAmB7B,GACpBiD,UAAUtC,YAAQkC,EAAcJ,IAE7D,OAAO,WACLO,EAAaE,iBAEd,CAAClB,IAXY,IAaRpD,EAASgE,EAAThE,EAAGC,EAAM+D,EAAN/D,EACLsE,EAAS,oBAAgBvE,GHpBL,EAAE,EAAI,KGoBjB,cAAsCC,GHpB3B,EAAE,EAAI,KGoBjB,MAMf,OACE,yBAAKqD,UAAU,sBACb,yBAAKA,UAAU,gCAAgCkB,MAAO,CAAED,eAExD,kBAAC,EAAD,CAAUnB,YAAaA,EAAaC,kBARd,WACxBa,EAAeO,UCjBCC,QACW,cAA7BnD,OAAOoD,SAASC,UAEe,UAA7BrD,OAAOoD,SAASC,UAEhBrD,OAAOoD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxE,SAASyE,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.52a6b855.chunk.js","sourcesContent":["export const AMORTIZATION = 0.95;\nexport const MOVE_THRESHOLD = 0.000001;\n\nexport const DEFAULT_TRANSLATE = { x: 0, y: 0 };\nexport const DEFAULT_DIFF = { dX: 0, dY: 0};\nexport const TRANSLATE_MODULO = 1;\nexport const SCALE_FACTOR = 1/3 * 100;\n","import { fromEvent, interval, merge, animationFrameScheduler } from 'rxjs';\nimport { takeUntil, mergeMap, pairwise, map, scan, withLatestFrom, takeWhile, tap, startWith, filter } from 'rxjs/operators';\nimport { pick, map as mapR, multiply, nth, values, all, compose, lt } from 'ramda';\nimport { AMORTIZATION, MOVE_THRESHOLD, DEFAULT_DIFF } from './constants';\n\nconst mouseMove$ = fromEvent(document, 'mousemove')\nconst mouseDown$ = fromEvent(document, 'mousedown')\nconst mouseUp$ = fromEvent(document, 'mouseup')\n\nconst mouseDrag$ = mouseDown$.pipe(\n  mergeMap(() => mouseMove$.pipe(\n    map(pick(['x', 'y'])),\n    pairwise(),\n    takeUntil(mouseUp$),\n  ))\n);\n\nconst animationFrame$ = interval(0, animationFrameScheduler);\n\nexport const dragging$ = mouseDrag$.pipe(\n  map(([prev, current]) => {\n    const { innerHeight: height, innerWidth: width } = window;\n\n    const dX = (current.x - prev.x) / width;\n    const dY = (current.y - prev.y) / height;\n\n    return { dX, dY };\n  })\n);\n\nconst draggingWithDefaultOnMouseDown$ = mouseDown$.pipe(\n  mergeMap(() => dragging$.pipe(startWith(DEFAULT_DIFF)))\n);\n\nconst allPassMoveThreshold = compose(all(lt(MOVE_THRESHOLD)), mapR(Math.abs), values);\n\nconst inertia$ = mouseUp$.pipe(\n  withLatestFrom(draggingWithDefaultOnMouseDown$),\n  map(nth(1)),\n  filter(allPassMoveThreshold),\n  tap((value) => console.log('Kick off inertia with: ', value)),\n  mergeMap((value) => animationFrame$.pipe(\n    scan(mapR(multiply(AMORTIZATION)), value),\n    takeWhile(allPassMoveThreshold),\n    takeUntil(mouseDown$)\n  ))\n);\n\nexport const inertiaDragging$ = merge(\n  dragging$,\n  inertia$\n);\n","import React from 'react';\nimport Switch from '@material-ui/core/Switch';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst Controls = ({ withInertia, toggleWithInertia }) => (\n  <div className=\"controls\">\n    <span className=\"controls-text\">\n      Drag seamless texture infinitely using pleasant inertia\n    </span>\n\n    <Tooltip title=\"Toggle inertia\">\n      <Switch \n        checked={withInertia}\n        onChange={toggleWithInertia}\n        value=\"withInertia\"\n        color=\"primary\"\n      />\n    </Tooltip>\n  </div> \n);\n\nexport default Controls;\n","import React, { useEffect, useState } from 'react';\nimport { compose, not } from 'ramda';\n\nimport { dragging$, inertiaDragging$ } from './dragging.js';\nimport { DEFAULT_TRANSLATE, TRANSLATE_MODULO, SCALE_FACTOR } from './constants.js';\nimport Controls from './Controls.js';\n\nconst addTranslate = ({ dX, dY }) => ({ x, y }) => ({\n  x: (x + dX) % TRANSLATE_MODULO,\n  y: (y + dY) % TRANSLATE_MODULO\n});\n\nconst App = () => {\n  const [translate, setTransalte] = useState(DEFAULT_TRANSLATE);\n  const [withInertia, setWithInertia ] = useState(true);\n\n  useEffect(() => {    \n    const stream$ = withInertia ? inertiaDragging$ : dragging$;\n    const subscription = stream$.subscribe(compose(setTransalte, addTranslate));\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [withInertia]);\n\n  const { x, y } = translate;\n  const transform = `translate(${x * SCALE_FACTOR}%, ${y * SCALE_FACTOR}%)`;\n\n  const toggleWithInertia = () => { \n    setWithInertia(not); \n  };\n\n  return (\n    <div className=\"dragging-container\">\n      <div className=\"dragging-background grabbable\" style={{ transform }} />\n\n      <Controls withInertia={withInertia} toggleWithInertia={toggleWithInertia} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}